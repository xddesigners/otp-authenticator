<?php

declare(strict_types=1);

namespace XD\OTPAuthenticator;

use OTPHP\OTPInterface;
use OTPHP\TOTP;
use ParagonIE\ConstantTime\Base32;
use RuntimeException;
use SilverStripe\Core\Environment;
use SilverStripe\Core\Injector\Injector;
use SilverStripe\MFA\Exception\AuthenticationFailedException;
use SilverStripe\MFA\Service\EncryptionAdapterInterface;
use SilverStripe\MFA\Store\StoreInterface;

trait TOTPAware
{
    protected function storeSecret(StoreInterface $store, string $secret = null): void
    {
        if (!$secret) {
            $secret = $this->generateSecret();
        }

        $store->setState([
            'secret' => $secret,
        ]);
    }

    protected function getCode(StoreInterface $store): string
    {
        $totp = $this->getTotp($store);

        return $totp->now();
    }

    protected function verifyCode(string $code, StoreInterface $store): bool
    {
        $totp = $this->getTotp($store);

        return $totp->verify($code);
    }

    /**
     * Gets the encryption key to use from environment variables. This is generated by default on the Common Web
     * Platform, but can be defined as a custom value if required.
     *
     * @return string
     */
    protected function getEncryptionKey(): string
    {
        return (string)Environment::getEnv('SS_MFA_SECRET_KEY');
    }

    /**
     * Generates a TOTP secret with the user's unique identifier
     *
     * @return string
     */
    protected function generateSecret(): string
    {
        $length = Method::config()->get('secret_length');

        return substr(trim(Base32::encodeUpper(random_bytes(64)), '='), 0, $length);
    }

    protected function encryptSecrey(string $secret): string
    {
        $key = $this->getEncryptionKey();
        if (empty($key)) {
            throw new AuthenticationFailedException(
                'Please define a SS_MFA_SECRET_KEY environment variable for encryption',
            );
        }

        return Injector::inst()->get(EncryptionAdapterInterface::class)->encrypt(
            $secret,
            $key,
        );
    }

    protected function decryptSecrey(string $secret): string
    {
        $key = $this->getEncryptionKey();
        if (empty($key)) {
            throw new AuthenticationFailedException(
                'Please define a SS_MFA_SECRET_KEY environment variable for encryption',
            );
        }

        return Injector::inst()->get(EncryptionAdapterInterface::class)->decrypt(
            $secret,
            $key,
        );
    }

    /**
     * Get an instance of the TOTP handler service. The secret must already be defined and set to the StoreInterface.
     *
     * @param StoreInterface $store
     * @throws RuntimeException
     * @return TOTPInterface
     */
    protected function getTotp(StoreInterface $store): OTPInterface
    {
        $state = $store->getState();
        if (!isset($state['secret'])) {
            throw new RuntimeException('OTP secret is not available in the StoreInterface');
        }

        $period = Method::config()->get('code_period');
        $length = Method::config()->get('code_length');

        return TOTP::create($state['secret'], $period, 'sha1', $length);
    }
}
